{"version":3,"sources":["pilas-editor/tests/acceptance/puede-abrir-un-ejemplo.js","pilas-editor/tests/acceptance/puede-abrir-un-ejemplo.jshint.js","pilas-editor/tests/acceptance/puede-ejecutar-un-proyecto-test.js","pilas-editor/tests/acceptance/puede-ejecutar-un-proyecto-test.jshint.js","pilas-editor/tests/acceptance/puede-visualizar-acercade-test.js","pilas-editor/tests/acceptance/puede-visualizar-acercade-test.jshint.js","pilas-editor/tests/app.jshint.js","pilas-editor/tests/blanket-options.js","pilas-editor/tests/blanket-options.jshint.js","pilas-editor/tests/components/modal-dialog.jshint.js","pilas-editor/tests/components/pilas-spliter.jshint.js","pilas-editor/tests/components/x-back.jshint.js","pilas-editor/tests/components/x-canvas.jshint.js","pilas-editor/tests/components/x-editor.jshint.js","pilas-editor/tests/components/x-example-list.jshint.js","pilas-editor/tests/components/x-example-preview.jshint.js","pilas-editor/tests/components/x-header.jshint.js","pilas-editor/tests/components/x-icon.jshint.js","pilas-editor/tests/components/x-img.jshint.js","pilas-editor/tests/components/x-main-button.jshint.js","pilas-editor/tests/components/x-manual.jshint.js","pilas-editor/tests/components/x-pushbutton.jshint.js","pilas-editor/tests/components/x-result.jshint.js","pilas-editor/tests/components/x-section-inspector.jshint.js","pilas-editor/tests/components/x-section-manual.jshint.js","pilas-editor/tests/components/x-select.jshint.js","pilas-editor/tests/components/x-spinner.jshint.js","pilas-editor/tests/components/x-state-button.jshint.js","pilas-editor/tests/components/x-title.jshint.js","pilas-editor/tests/controllers/edit.jshint.js","pilas-editor/tests/controllers/edit/settings-modal.jshint.js","pilas-editor/tests/controllers/examples/run-modal.jshint.js","pilas-editor/tests/controllers/index.jshint.js","pilas-editor/tests/controllers/index/about.jshint.js","pilas-editor/tests/controllers/index/setup.jshint.js","pilas-editor/tests/controllers/mobile/run-modal.jshint.js","pilas-editor/tests/controllers/project.jshint.js","pilas-editor/tests/controllers/project/run-modal.jshint.js","pilas-editor/tests/controllers/test.jshint.js","pilas-editor/tests/electron.js","pilas-editor/tests/electron.jshint.js","pilas-editor/tests/helpers/createPilasTest.js","pilas-editor/tests/helpers/createPilasTest.jshint.js","pilas-editor/tests/helpers/destroy-app.js","pilas-editor/tests/helpers/destroy-app.jshint.js","pilas-editor/tests/helpers/module-for-acceptance.js","pilas-editor/tests/helpers/module-for-acceptance.jshint.js","pilas-editor/tests/helpers/resolver.js","pilas-editor/tests/helpers/resolver.jshint.js","pilas-editor/tests/helpers/start-app.js","pilas-editor/tests/helpers/start-app.jshint.js","pilas-editor/tests/integration/components/pilasengine-actores-test.js","pilas-editor/tests/integration/components/pilasengine-actores-test.jshint.js","pilas-editor/tests/integration/components/pilasengine-etiquetas-test.js","pilas-editor/tests/integration/components/pilasengine-etiquetas-test.jshint.js","pilas-editor/tests/integration/components/pilasengine-imagenes-tests.js","pilas-editor/tests/integration/components/pilasengine-imagenes-tests.jshint.js","pilas-editor/tests/integration/components/x-back-test.js","pilas-editor/tests/integration/components/x-back-test.jshint.js","pilas-editor/tests/integration/components/x-example-list-test.js","pilas-editor/tests/integration/components/x-example-list-test.jshint.js","pilas-editor/tests/integration/components/x-example-preview-test.js","pilas-editor/tests/integration/components/x-example-preview-test.jshint.js","pilas-editor/tests/integration/components/x-header-test.js","pilas-editor/tests/integration/components/x-header-test.jshint.js","pilas-editor/tests/integration/components/x-icon-test.js","pilas-editor/tests/integration/components/x-icon-test.jshint.js","pilas-editor/tests/integration/components/x-img-test.js","pilas-editor/tests/integration/components/x-img-test.jshint.js","pilas-editor/tests/integration/components/x-main-button-test.js","pilas-editor/tests/integration/components/x-main-button-test.jshint.js","pilas-editor/tests/integration/components/x-manual-test.js","pilas-editor/tests/integration/components/x-manual-test.jshint.js","pilas-editor/tests/integration/components/x-pushbutton-test.js","pilas-editor/tests/integration/components/x-pushbutton-test.jshint.js","pilas-editor/tests/integration/components/x-section-inspector-test.js","pilas-editor/tests/integration/components/x-section-inspector-test.jshint.js","pilas-editor/tests/integration/components/x-section-manual-test.js","pilas-editor/tests/integration/components/x-section-manual-test.jshint.js","pilas-editor/tests/integration/components/x-select-test.js","pilas-editor/tests/integration/components/x-select-test.jshint.js","pilas-editor/tests/integration/components/x-spinner-test.js","pilas-editor/tests/integration/components/x-spinner-test.jshint.js","pilas-editor/tests/integration/components/x-state-button-test.js","pilas-editor/tests/integration/components/x-state-button-test.jshint.js","pilas-editor/tests/integration/components/x-title-test.js","pilas-editor/tests/integration/components/x-title-test.jshint.js","pilas-editor/tests/models/project.jshint.js","pilas-editor/tests/router.jshint.js","pilas-editor/tests/routes/application.jshint.js","pilas-editor/tests/routes/edit.jshint.js","pilas-editor/tests/routes/edit/settings-modal.jshint.js","pilas-editor/tests/routes/examples/index.jshint.js","pilas-editor/tests/routes/examples/run-modal.jshint.js","pilas-editor/tests/routes/index.jshint.js","pilas-editor/tests/routes/manual.jshint.js","pilas-editor/tests/routes/mobile.examples.jshint.js","pilas-editor/tests/routes/mobile.jshint.js","pilas-editor/tests/routes/mobile/examples.jshint.js","pilas-editor/tests/routes/mobile/index.jshint.js","pilas-editor/tests/routes/mobile/run-modal.jshint.js","pilas-editor/tests/routes/project.jshint.js","pilas-editor/tests/routes/project/run-modal.jshint.js","pilas-editor/tests/routes/test.jshint.js","pilas-editor/tests/services/editor-factory.jshint.js","pilas-editor/tests/services/electron.jshint.js","pilas-editor/tests/services/example-list.jshint.js","pilas-editor/tests/services/language-service.jshint.js","pilas-editor/tests/services/pilas.jshint.js","pilas-editor/tests/services/preferences.jshint.js","pilas-editor/tests/services/sweetalert.jshint.js","pilas-editor/tests/test-helper.js","pilas-editor/tests/test-helper.jshint.js","pilas-editor/tests/unit/controllers/edit-test.js","pilas-editor/tests/unit/controllers/edit-test.jshint.js","pilas-editor/tests/unit/controllers/index/about-test.js","pilas-editor/tests/unit/controllers/index/about-test.jshint.js","pilas-editor/tests/unit/controllers/project-test.js","pilas-editor/tests/unit/controllers/project-test.jshint.js","pilas-editor/tests/unit/models/project-test.js","pilas-editor/tests/unit/models/project-test.jshint.js","pilas-editor/tests/unit/routes/application-test.js","pilas-editor/tests/unit/routes/application-test.jshint.js","pilas-editor/tests/unit/routes/edit-test.js","pilas-editor/tests/unit/routes/edit-test.jshint.js","pilas-editor/tests/unit/routes/examples/index-test.js","pilas-editor/tests/unit/routes/examples/index-test.jshint.js","pilas-editor/tests/unit/routes/index-test.js","pilas-editor/tests/unit/routes/index-test.jshint.js","pilas-editor/tests/unit/routes/manual-test.js","pilas-editor/tests/unit/routes/manual-test.jshint.js","pilas-editor/tests/unit/routes/mobile-test.js","pilas-editor/tests/unit/routes/mobile-test.jshint.js","pilas-editor/tests/unit/routes/mobile.examples-test.js","pilas-editor/tests/unit/routes/mobile.examples-test.jshint.js","pilas-editor/tests/unit/routes/mobile/examples-test.js","pilas-editor/tests/unit/routes/mobile/examples-test.jshint.js","pilas-editor/tests/unit/routes/project-test.js","pilas-editor/tests/unit/routes/project-test.jshint.js","pilas-editor/tests/unit/routes/project/run-modal-test.js","pilas-editor/tests/unit/routes/project/run-modal-test.jshint.js","pilas-editor/tests/unit/routes/test-test.js","pilas-editor/tests/unit/routes/test-test.jshint.js","pilas-editor/tests/unit/services/editor-factory-test.js","pilas-editor/tests/unit/services/editor-factory-test.jshint.js","pilas-editor/tests/unit/services/electron-test.js","pilas-editor/tests/unit/services/electron-test.jshint.js","pilas-editor/tests/unit/services/example-list-test.js","pilas-editor/tests/unit/services/example-list-test.jshint.js","pilas-editor/tests/unit/services/language-service-test.js","pilas-editor/tests/unit/services/language-service-test.jshint.js","pilas-editor/tests/unit/services/pilas-test.js","pilas-editor/tests/unit/services/pilas-test.jshint.js","pilas-editor/tests/unit/services/preferences-test.js","pilas-editor/tests/unit/services/preferences-test.jshint.js","pilas-editor/tests/unit/services/sweetalert-test.js","pilas-editor/tests/unit/services/sweetalert-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('pilas-editor/tests/acceptance/puede-abrir-un-ejemplo', ['exports', 'qunit', 'pilas-editor/tests/helpers/module-for-acceptance'], function (exports, _qunit, _pilasEditorTestsHelpersModuleForAcceptance) {\n\n  (0, _pilasEditorTestsHelpersModuleForAcceptance['default'])('Acceptance | puede abrir un ejemplo');\n\n  (0, _qunit.test)('visiting /examples', function (assert) {\n    visit('/examples');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/examples');\n    });\n  });\n});","define('pilas-editor/tests/acceptance/puede-abrir-un-ejemplo.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/puede-abrir-un-ejemplo.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/puede-abrir-un-ejemplo.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/acceptance/puede-ejecutar-un-proyecto-test', ['exports', 'qunit', 'pilas-editor/tests/helpers/module-for-acceptance'], function (exports, _qunit, _pilasEditorTestsHelpersModuleForAcceptance) {\n\n  (0, _pilasEditorTestsHelpersModuleForAcceptance['default'])('Acceptance | puede ejecutar un proyecto');\n\n  (0, _qunit.test)('visiting /', function (assert) {\n    server.createList('project', 1);\n    visit('/');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/');\n      click($(\"button:contains('Proyectos')\"));\n    });\n\n    andThen(function () {\n      assert.equal($(\"button:contains('Ejecutar')\").length, 1, \"Existe el botón ejecutar en la lista de proyectos.\");\n      click($(\"button:contains('Ejecutar')\"));\n    });\n\n    andThen(function () {\n      assert.equal($(\"iframe\").length, 2, \"Hay un iframe para el resultado.\");\n    });\n  });\n});","define('pilas-editor/tests/acceptance/puede-ejecutar-un-proyecto-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/puede-ejecutar-un-proyecto-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/puede-ejecutar-un-proyecto-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/acceptance/puede-visualizar-acercade-test', ['exports', 'qunit', 'pilas-editor/tests/helpers/module-for-acceptance'], function (exports, _qunit, _pilasEditorTestsHelpersModuleForAcceptance) {\n\n  (0, _pilasEditorTestsHelpersModuleForAcceptance['default'])('Acceptance | puede visualizar acercade');\n\n  (0, _qunit.test)('visiting /', function (assert) {\n    visit('/');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/', \"puede ingresar a la sección inicial.\");\n      click($(\"button:contains('Acerca de ...')\"));\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/about', \"pudo ingresar a la sección about.\");\n    });\n  });\n});","define('pilas-editor/tests/acceptance/puede-visualizar-acercade-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/puede-visualizar-acercade-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/puede-visualizar-acercade-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/blanket-options', ['exports'], function (exports) {\n  /* globals blanket, module */\n\n  var options = {\n    modulePrefix: 'pilas-editor',\n    filter: '//.*pilas-editor/.*/',\n    antifilter: '//.*(tests|template).*/',\n    loaderExclusions: [],\n    enableCoverage: true,\n    cliOptions: {\n      reporters: ['json'],\n      autostart: true\n    }\n  };\n  if (typeof exports === 'undefined') {\n    blanket.options(options);\n  } else {\n    module.exports = options;\n  }\n});","define('pilas-editor/tests/blanket-options.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - blanket-options.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'blanket-options.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/modal-dialog.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/modal-dialog.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/modal-dialog.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/pilas-spliter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/pilas-spliter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pilas-spliter.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-back.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-back.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-back.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-canvas.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-canvas.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-canvas.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-editor.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-editor.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-editor.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-example-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-example-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-example-list.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-example-preview.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-example-preview.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-example-preview.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-header.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-header.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-header.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-icon.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-icon.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-icon.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-img.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-img.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-img.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-main-button.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-main-button.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-main-button.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-manual.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-manual.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-manual.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-pushbutton.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-pushbutton.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-pushbutton.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-result.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-result.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-result.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-section-inspector.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-section-inspector.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-section-inspector.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-section-manual.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-section-manual.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-section-manual.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-select.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-select.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-select.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-spinner.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-spinner.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-spinner.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-state-button.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-state-button.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-state-button.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/components/x-title.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/x-title.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-title.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/controllers/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/edit.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/controllers/edit/settings-modal.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/edit/settings-modal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/edit/settings-modal.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/controllers/examples/run-modal.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/examples/run-modal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/examples/run-modal.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/controllers/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/controllers/index/about.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/index/about.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index/about.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/controllers/index/setup.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/index/setup.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index/setup.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/controllers/mobile/run-modal.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/mobile/run-modal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/mobile/run-modal.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/controllers/project.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/project.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/project.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/controllers/project/run-modal.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/project/run-modal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/project/run-modal.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/controllers/test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/electron', ['exports'], function (exports) {\n    /* jshint undef: false */\n\n    var BrowserWindow = require('browser-window');\n    var app = require('app');\n    var mainWindow = null;\n\n    app.on('window-all-closed', function onWindowAllClosed() {\n        if (process.platform !== 'darwin') {\n            app.quit();\n        }\n    });\n\n    app.on('ready', function onReady() {\n        mainWindow = new BrowserWindow({\n            width: 800,\n            height: 600\n        });\n\n        delete mainWindow.module;\n\n        if (process.env.EMBER_ENV === 'test') {\n            mainWindow.loadUrl('file://' + __dirname + '/index.html');\n        } else {\n            mainWindow.loadUrl('file://' + __dirname + '/dist/index.html');\n        }\n\n        mainWindow.on('closed', function onClosed() {\n            mainWindow = null;\n        });\n    });\n\n    /* jshint undef: true */\n});","define('pilas-editor/tests/electron.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - electron.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'electron.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/helpers/createPilasTest', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = createPilasTest;\n\n  function createPilasTest(context, callback) {\n    // context en este caso es el test en si mismo (this).\n\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n\n      context.on('onLoad', function (val) {\n        var iframe = val.iframeElement;\n        var pilas = iframe.contentWindow.eval(\"pilasengine.iniciar('canvas', {ancho: 640, alto: 384, omitir_impresion_de_version: true})\");\n\n        pilas.cuando(\"inicia\", function () {\n          callback(pilas, resolve);\n        });\n      });\n\n      context.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type', 'multiple-nodes']\n            },\n            'revision': 'Ember@2.2.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 9,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n    ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('style');\n            var el2 = dom.createTextNode('\\n      iframe {\\n        position: absolute;\\n        top:0;\\n        bottom: 0;\\n      }\\n    ');\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n    ');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            return morphs;\n          },\n          statements: [['inline', 'x-canvas', [], ['onLoad', 'onLoad'], ['loc', [null, [1, 0], [1, 28]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n    });\n  }\n});","define('pilas-editor/tests/helpers/createPilasTest.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/createPilasTest.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/createPilasTest.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('pilas-editor/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'pilas-editor/tests/helpers/start-app', 'pilas-editor/tests/helpers/destroy-app'], function (exports, _qunit, _pilasEditorTestsHelpersStartApp, _pilasEditorTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _pilasEditorTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _pilasEditorTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('pilas-editor/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/helpers/resolver', ['exports', 'ember-resolver', 'pilas-editor/config/environment'], function (exports, _emberResolver, _pilasEditorConfigEnvironment) {\n\n  var resolver = _emberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _pilasEditorConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _pilasEditorConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('pilas-editor/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/helpers/start-app', ['exports', 'ember', 'pilas-editor/app', 'pilas-editor/config/environment'], function (exports, _ember, _pilasEditorApp, _pilasEditorConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _pilasEditorConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _pilasEditorApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('pilas-editor/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/pilasengine-actores-test', ['exports', 'ember-qunit', 'pilas-editor/tests/helpers/createPilasTest'], function (exports, _emberQunit, _pilasEditorTestsHelpersCreatePilasTest) {\n\n  (0, _emberQunit.moduleForComponent)('demo', 'Integration | Component | x-canvas', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('puede crear un actor personalizado', function (assert) {\n    return (0, _pilasEditorTestsHelpersCreatePilasTest['default'])(this, function (pilas, resolve) {\n      var mensaje_error_esperado = /Solo se admiten clases como parámetro./;\n\n      assert.throws(function () {\n        pilas.actores.vincular();\n      }, mensaje_error_esperado, \"Laza un error si no se especifica una clase.\");\n\n      assert.throws(function () {\n        pilas.actores.vincular(\"cadena\");\n      }, mensaje_error_esperado, \"También lanza error si no se envía una clase.\");\n\n      resolve({});\n    });\n  });\n\n  (0, _emberQunit.test)('puede crear un actor', function (assert) {\n\n    return (0, _pilasEditorTestsHelpersCreatePilasTest['default'])(this, function (pilas, resolve) {\n      var actor = pilas.actores.actor();\n      assert.equal(actor.x, 0, \"El actor está en la posición inicial X=0.\");\n      assert.equal(actor.y, 0, \"El actor está en la posición inicial Y=0.\");\n\n      setTimeout(resolve, 500);\n    });\n  });\n\n  (0, _emberQunit.test)('puede crear un actor patito', function (assert) {\n\n    return (0, _pilasEditorTestsHelpersCreatePilasTest['default'])(this, function (pilas, resolve) {\n      var patito = pilas.actores.patito();\n      assert.equal(patito.x, 0, \"El actor está en la posición inicial.\");\n      patito.x = 100;\n\n      setTimeout(resolve, 500);\n    });\n  });\n\n  (0, _emberQunit.test)('puede autocompletar', function (assert) {\n\n    return (0, _pilasEditorTestsHelpersCreatePilasTest['default'])(this, function (pilas, resolve) {\n      assert.deepEqual(pilas.utils.autocompletar(\"\"), [], \"Retorna vacío si no especifica prefijo.\");\n      assert.deepEqual(pilas.utils.autocompletar(\"noexiste\"), [], \"Retorna vacío si la variables es incorrecta.\");\n      assert.deepEqual(pilas.utils.autocompletar(\"pilasen\"), ['pilasengine'], \"Autocompleta pilasengine.\");\n      assert.deepEqual(pilas.utils.autocompletar(\"PiLASEN\"), ['pilasengine'], \"Autocompleta incluso ignorando mayúsculas o minúsculas.\");\n      //assert.deepEqual(pilas.utils.autocompletar(\"pilas.actores.pat\"), ['pilas.actores.patito'], \"Autocompleta funciones dentro de un objeto.\");\n      //assert.deepEqual(pilas.utils.autocompletar(\"pilas.acto\"),        ['pilas.actores'], \"Autocompleta funciones dentro de un objeto.\");\n\n      setTimeout(resolve, 2000);\n    });\n  });\n\n  (0, _emberQunit.test)('Puede inicializar y crear actores', function (assert) {\n    return (0, _pilasEditorTestsHelpersCreatePilasTest['default'])(this, function (pilas, resolve) {\n      assert.ok(pilas.escenas.normal, \"Existe la escena normal.\");\n      assert.ok(!pilas.escenas.norsdsdmal, \"No existe una escena norsdsdmal.\");\n      pilas.reiniciar();\n\n      assert.equal(pilas.obtener_cantidad_de_actores(), 1, \"Luego de reiniciar vuelve a haber un solo actor (el fondo).\");\n\n      setTimeout(resolve, 2000);\n    });\n  });\n\n  (0, _emberQunit.test)('Puede cambiar propiedades de los actores', function (assert) {\n    return (0, _pilasEditorTestsHelpersCreatePilasTest['default'])(this, function (pilas, resolve) {\n      pilas.reiniciar();\n\n      var patito = pilas.actores.patito();\n\n      assert.equal(patito.x, 0, \"El actor está en el centro de la pantalla.\");\n      assert.equal(patito.y, 0, \"El actor está en el centro de la pantalla.\");\n\n      assert.equal(patito.rotacion, 0, \"El actor está sin rotacion.\");\n      patito.rotacion = 180;\n      assert.equal(patito.rotacion, 180, \"Pudo cambiar de rotación.\");\n      patito.rotacion = 0;\n      assert.equal(patito.rotacion, 0, \"Y pudo restaurar la rotación.\");\n\n      setTimeout(resolve, 2000);\n    });\n  });\n\n  (0, _emberQunit.test)('Puede aplicar interpolaciones a los actores', function (assert) {\n\n    return (0, _pilasEditorTestsHelpersCreatePilasTest['default'])(this, function (pilas, resolve) {\n      pilas.reiniciar();\n\n      var patito = pilas.actores.patito();\n      patito.escala = [2, 1, 2];\n\n      setTimeout(function () {\n        //assert.equal(patito.escala, 2, \"Luego de unos segundos escaló correctamente.\");\n\n        patito.rotacion = [180];\n\n        setTimeout(function () {\n          assert.equal(patito.rotacion, 180, \"Puede dar media vuelta.\");\n          patito.escala = [0];\n\n          setTimeout(function () {\n            assert.equal(patito.escala, 0, \"Puede cambiar la escala a 0.\");\n            resolve();\n          }, 1000);\n        }, 1000);\n      }, 2000);\n    });\n  });\n\n  (0, _emberQunit.test)('test-iniciar: Puede inicializar y crear actores', function (assert) {\n\n    return (0, _pilasEditorTestsHelpersCreatePilasTest['default'])(this, function (pilas, resolve) {\n      pilas.reiniciar();\n\n      assert.equal(pilas.obtener_cantidad_de_actores(), 1, \"Hay un solo actor en pantalla (el fondo).\");\n\n      var patito = pilas.actores.patito();\n      assert.ok(patito, \"Pudo crear correctamente al actor parito.\");\n\n      assert.equal(pilas.obtener_cantidad_de_actores(), 2, \"Ahora hay dos, el fondo y el patito.\");\n\n      pilas.reiniciar();\n      assert.equal(pilas.obtener_cantidad_de_actores(), 1, \"Luego de reiniciar vuelve a haber un solo actor (el fondo).\");\n\n      resolve();\n    });\n  });\n});","define('pilas-editor/tests/integration/components/pilasengine-actores-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/pilasengine-actores-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pilasengine-actores-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/pilasengine-etiquetas-test', ['exports', 'ember-qunit', 'pilas-editor/tests/helpers/createPilasTest'], function (exports, _emberQunit, _pilasEditorTestsHelpersCreatePilasTest) {\n\n  (0, _emberQunit.moduleForComponent)('demo', 'Integration | Component | x-canvas | etiquetas', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('el actor tiene etiquetas iniciales', function (assert) {\n    return (0, _pilasEditorTestsHelpersCreatePilasTest['default'])(this, function (pilas, resolve) {\n\n      var actor = pilas.actores.actor();\n\n      assert.ok(actor.etiquetas, \"Existe el objeto etiquetas dentro del actor.\");\n\n      assert.equal(actor.etiquetas.tiene_etiqueta('actor'), true, \"Tiene la etiqueta de la clase.\");\n      assert.equal(actor.etiquetas.tiene_etiqueta('ejemplo'), false, \"No tiene otra etiqueta incorrecta.\");\n      assert.deepEqual(actor.etiquetas.obtener_como_lista(), ['actor'], \"Puede retornar las etiquetas como una lista.\");\n      assert.equal(actor.etiquetas.obtener_cantidad(), 1, \"Tiene exactamente dos etiquetas.\");\n\n      assert.equal(actor.tiene_etiqueta('actor'), true, \"El método de consulta también funciona directamente en el actor.\");\n      assert.equal(actor.obtener_cantidad_de_etiquetas(), 1, \"Solo tiene una etiqueta.\");\n\n      /* Si agrega otra etiqueta ... */\n      actor.agregar_etiqueta('protagonista');\n      assert.equal(actor.etiquetas.obtener_cantidad(), 2, \"Luego de agregar la etiqueta protagonista ya son dos las etiquetas.\");\n\n      /* Agregando varias veces la misma etiqueta no influye. */\n      actor.agregar_etiqueta('protagonista');\n      actor.agregar_etiqueta('ProtaGonista');\n      actor.agregar_etiqueta('protagonista');\n\n      assert.equal(actor.etiquetas.obtener_cantidad(), 2, \"Agregar varias veces la misma etiqueta no influye.\");\n\n      /* Las etiquetas se pueden eliminar */\n\n      actor.eliminar_etiqueta(\"ProtagOnista\");\n      actor.eliminar_etiqueta(\"pepepe\"); // Esta etiqueta no existe, así que no influye.\n      assert.equal(actor.etiquetas.obtener_cantidad(), 1, \"Las etiquetas se pueden eliminar\");\n\n      resolve({});\n    });\n  });\n});","define('pilas-editor/tests/integration/components/pilasengine-etiquetas-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/pilasengine-etiquetas-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pilasengine-etiquetas-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/pilasengine-imagenes-tests', ['exports', 'ember-qunit', 'pilas-editor/tests/helpers/createPilasTest'], function (exports, _emberQunit, _pilasEditorTestsHelpersCreatePilasTest) {\n\n  (0, _emberQunit.moduleForComponent)('demo', 'Integration | Component | x-canvas | imagenes', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('las imágenes cargadas se pueden listar y consultar', function (assert) {\n    return (0, _pilasEditorTestsHelpersCreatePilasTest['default'])(this, function (pilas, resolve) {\n\n      //let actor = pilas.actores.actor();\n\n      assert.ok(pilas.imagenes.obtener_como_lista(), \"Existe el método para listar todas las imágenes.\");\n      assert.ok(pilas.imagenes.obtener_como_lista().length, \"Retorna una lista como se espera.\");\n\n      assert.equal(pilas.imagenes.existe_imagen('data:sin_imagen.png'), true, \"Se puede cargar la imagenen 'data:sin_imagen.png'\");\n      assert.equal(pilas.imagenes.existe_imagen('data:pepepe.png'), true, \"Se puede cargar la imagenen 'data:sin_imagen.png'\");\n\n      resolve({});\n    });\n  });\n});","define('pilas-editor/tests/integration/components/pilasengine-imagenes-tests.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/pilasengine-imagenes-tests.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pilasengine-imagenes-tests.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-back-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-back', 'Integration | Component | x back', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 10\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-back', ['loc', [null, [1, 0], [1, 10]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$().text().trim(), 'Regresar');\n  });\n});","define('pilas-editor/tests/integration/components/x-back-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-back-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-back-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-example-list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-example-list', 'Integration | Component | x example list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-example-list', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('pilas-editor/tests/integration/components/x-example-list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-example-list-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-example-list-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-example-preview-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-example-preview', 'Integration | Component | x example preview', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-example-preview', ['loc', [null, [1, 0], [1, 21]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('pilas-editor/tests/integration/components/x-example-preview-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-example-preview-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-example-preview-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-header-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-header', 'Integration | Component | x header', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 12\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-header', ['loc', [null, [1, 0], [1, 12]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.2.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'x-header', [], [], 0, null, ['loc', [null, [2, 4], [4, 17]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('pilas-editor/tests/integration/components/x-header-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-header-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-header-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-icon-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-icon', 'Integration | Component | x icon', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 10\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-icon', ['loc', [null, [1, 0], [1, 10]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.2.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'x-icon', [], [], 0, null, ['loc', [null, [2, 4], [4, 15]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('pilas-editor/tests/integration/components/x-icon-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-icon-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-icon-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-img-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-img', 'Integration | Component | x img', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 9\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-img', ['loc', [null, [1, 0], [1, 9]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('pilas-editor/tests/integration/components/x-img-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-img-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-img-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-main-button-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-main-button', 'Integration | Component | x main button', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 17\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-main-button', ['loc', [null, [1, 0], [1, 17]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('pilas-editor/tests/integration/components/x-main-button-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-main-button-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-main-button-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-manual-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-manual', 'Integration | Component | x manual', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 12\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-manual', ['loc', [null, [1, 0], [1, 12]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('pilas-editor/tests/integration/components/x-manual-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-manual-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-manual-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-pushbutton-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-pushbutton', 'Integration | Component | x pushbutton', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-pushbutton', ['loc', [null, [1, 0], [1, 16]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\" + EOL +\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.2.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'x-pushbutton', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('pilas-editor/tests/integration/components/x-pushbutton-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-pushbutton-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-pushbutton-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-section-inspector-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-section-inspector', 'Integration | Component | x section inspector', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 23\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-section-inspector', ['loc', [null, [1, 0], [1, 23]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(this.$().text().trim(), 'Tiene al menos un texto inicial.');\n  });\n});","define('pilas-editor/tests/integration/components/x-section-inspector-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-section-inspector-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-section-inspector-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-section-manual-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-section-manual', 'Integration | Component | x section manual', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-section-manual', ['loc', [null, [1, 0], [1, 20]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$(\"iframe\").length, 1, \"Existe un iframe para el manual.\");\n  });\n});","define('pilas-editor/tests/integration/components/x-section-manual-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-section-manual-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-section-manual-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-select-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-select', 'Integration | Component | x select', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('options', ['uno']);\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 28\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'x-select', [], ['options', ['subexpr', '@mut', [['get', 'options', ['loc', [null, [1, 19], [1, 26]]]]], [], []]], ['loc', [null, [1, 0], [1, 28]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'uno');\n  });\n});","define('pilas-editor/tests/integration/components/x-select-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-select-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-select-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-spinner-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-spinner', 'Integration | Component | x spinner', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 13\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-spinner', ['loc', [null, [1, 0], [1, 13]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('pilas-editor/tests/integration/components/x-spinner-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-spinner-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-spinner-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-state-button-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-state-button', 'Integration | Component | x state button', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('option', 'A simple option');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-state-button', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$().text().trim(), '', 'Sin propiedades no imprime texto.');\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 32\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'x-state-button', [], ['option', ['subexpr', '@mut', [['get', 'option', ['loc', [null, [1, 24], [1, 30]]]]], [], []]], ['loc', [null, [1, 0], [1, 32]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$().text().trim(), 'A simple option', 'Con un texto lo incluye en el botón.');\n  });\n});","define('pilas-editor/tests/integration/components/x-state-button-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-state-button-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-state-button-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/integration/components/x-title-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-title', 'Integration | Component | x title', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 11\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'x-title', ['loc', [null, [1, 0], [1, 11]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    this.set(\"title\", \"hola\");\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['empty-body']\n            },\n            'revision': 'Ember@2.2.0',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 24\n              }\n            }\n          },\n          isEmpty: true,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.2.0',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 36\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['block', 'x-title', [], ['title', ['subexpr', '@mut', [['get', 'title', ['loc', [null, [1, 17], [1, 22]]]]], [], []]], 0, null, ['loc', [null, [1, 0], [1, 36]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'hola', \"Muestra el título\");\n  });\n});","define('pilas-editor/tests/integration/components/x-title-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/x-title-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-title-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/models/project.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/project.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/project.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/edit.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/edit/settings-modal.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/edit/settings-modal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/edit/settings-modal.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/examples/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/examples/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/index.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/examples/run-modal.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/examples/run-modal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/examples/run-modal.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/manual.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/manual.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/manual.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/mobile.examples.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/mobile.examples.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/mobile.examples.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/mobile.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/mobile.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/mobile.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/mobile/examples.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/mobile/examples.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/mobile/examples.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/mobile/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/mobile/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/mobile/index.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/mobile/run-modal.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/mobile/run-modal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/mobile/run-modal.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/project.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/project.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/project.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/project/run-modal.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/project/run-modal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/project/run-modal.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/routes/test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/services/editor-factory.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/editor-factory.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/editor-factory.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/services/electron.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/electron.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/electron.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/services/example-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/example-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/example-list.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/services/language-service.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/language-service.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/language-service.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/services/pilas.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/pilas.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/pilas.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/services/preferences.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/preferences.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/preferences.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/services/sweetalert.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/sweetalert.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/sweetalert.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/test-helper', ['exports', 'pilas-editor/tests/helpers/resolver', 'ember-qunit'], function (exports, _pilasEditorTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_pilasEditorTestsHelpersResolver['default']);\n});","define('pilas-editor/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/controllers/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:edit', 'Unit | Controller | edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('pilas-editor/tests/unit/controllers/edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/edit-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/controllers/index/about-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:index/about', 'Unit | Controller | index/about', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('pilas-editor/tests/unit/controllers/index/about-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/index/about-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/index/about-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/controllers/project-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:project', 'Unit | Controller | project', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('pilas-editor/tests/unit/controllers/project-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/project-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/project-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/models/project-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('project', 'Unit | Model | project', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('pilas-editor/tests/unit/models/project-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/project-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/project-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pilas-editor/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/routes/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:edit', 'Unit | Route | edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pilas-editor/tests/unit/routes/edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/routes/examples/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:examples/index', 'Unit | Route | examples/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pilas-editor/tests/unit/routes/examples/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/examples/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/examples/index-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pilas-editor/tests/unit/routes/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/routes/manual-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:manual', 'Unit | Route | manual', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pilas-editor/tests/unit/routes/manual-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/manual-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/manual-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/routes/mobile-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:mobile', 'Unit | Route | mobile', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pilas-editor/tests/unit/routes/mobile-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/mobile-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/mobile-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/routes/mobile.examples-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:mobile.examples', 'Unit | Route | mobile.examples', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pilas-editor/tests/unit/routes/mobile.examples-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/mobile.examples-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/mobile.examples-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/routes/mobile/examples-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:mobile/examples', 'Unit | Route | mobile/examples', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pilas-editor/tests/unit/routes/mobile/examples-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/mobile/examples-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/mobile/examples-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/routes/project-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:project', 'Unit | Route | project', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pilas-editor/tests/unit/routes/project-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/project-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/project-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/routes/project/run-modal-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:project/run-modal', 'Unit | Route | project/run modal', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pilas-editor/tests/unit/routes/project/run-modal-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/project/run-modal-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/project/run-modal-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/routes/test-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:test', 'Unit | Route | test', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pilas-editor/tests/unit/routes/test-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/test-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/test-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/services/editor-factory-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:editor-factory', 'Unit | Service | editor factory', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('pilas-editor/tests/unit/services/editor-factory-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/editor-factory-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/editor-factory-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/services/electron-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:electron', 'Unit | Service | electron', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('pilas-editor/tests/unit/services/electron-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/electron-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/electron-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/services/example-list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:example-list', 'Unit | Service | example list', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('pilas-editor/tests/unit/services/example-list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/example-list-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/example-list-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/services/language-service-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:language-service', 'Unit | Service | language service', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('pilas-editor/tests/unit/services/language-service-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/language-service-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/language-service-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/services/pilas-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:pilas', 'Unit | Service | pilas', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('pilas-editor/tests/unit/services/pilas-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/pilas-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/pilas-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/services/preferences-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:preferences', 'Unit | Service | preferences', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('pilas-editor/tests/unit/services/preferences-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/preferences-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/preferences-test.js should pass jshint.');\n  });\n});","define('pilas-editor/tests/unit/services/sweetalert-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:sweetalert', 'Unit | Service | sweetalert', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('pilas-editor/tests/unit/services/sweetalert-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/sweetalert-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/sweetalert-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('pilas-editor/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACttDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtlDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljzfile":"tests.js"}