{
    "docs": [
        {
            "location": "/", 
            "text": "\u00a1 Bienvenido !\n\n\n\n\npilas-engine\n es una herramienta que te permite\ncrear tus propios videojuegos y aprender a programar. Est\u00e1 dise\u00f1ada por\ndesarrolladores de habla hispana y cuenta con el respaldo de docentes\ny profesionales especialistas en desarrollo de Software.\n\n\nEl objetivo de este documento es presentar las caracter\u00edsticas del motor, y dar un recorrido general por todos los componentes que se pueden utilizar.", 
            "title": "Principal"
        }, 
        {
            "location": "/#bienvenido", 
            "text": "pilas-engine  es una herramienta que te permite\ncrear tus propios videojuegos y aprender a programar. Est\u00e1 dise\u00f1ada por\ndesarrolladores de habla hispana y cuenta con el respaldo de docentes\ny profesionales especialistas en desarrollo de Software.  El objetivo de este documento es presentar las caracter\u00edsticas del motor, y dar un recorrido general por todos los componentes que se pueden utilizar.", 
            "title": "\u00a1 Bienvenido !"
        }, 
        {
            "location": "/etiquetas/", 
            "text": "Etiquetas\n\n\nLas etiquetas nos permiten se\u00f1alar actores, ponerles una marca de\nclasificaci\u00f3n y distinguirlos de manera muy simple.\n\n\nCada etiqueta es solamente una palabra, por ejemplo \"enemigo\",\n\"protagonista\", \"munici\u00f3n\" etc... y podemos vincularla\ncon cualquier actor o grupo, para se\u00f1alar el rol de ese actor\no grupo.\n\n\nLas etiquetas se utilizan principalmente para simplificar\nla creaci\u00f3n de colisiones, que vimos en el\ncap\u00edtulo anterior.\n\n\nConociendo las Etiquetas\n\n\nCada actor que existe en pilas tiene un atributo \netiquetas\n,\nque inicialmente tiene el nombre de la clase que origin\u00f3\nal actor, por ejemplo:\n\n\n mono = pilas.actores.Mono()\n\n mono.etiquetas\n['mono']\n\n\n aceituna = pilas.actores.Aceituna()\n\n aceituna.etiquetas\n['aceituna']\n\n\n\ny estas etiquetas, a su vez, se pueden a\u00f1adir usando el m\u00e9todo \nagregar\n:\n\n\n mono.etiquetas.agregar('protagonista')\n['mono', 'protagonista']\n\n\n\no incluso consultar si un actor tiene o no una determinada etiqueta:\n\n\n mono.tiene_etiqueta(\"enemigo\")\nFalse\n\n mono.tiene_etiqueta(\"mono\")\nTrue\n\n\n\nUsando grupos\n\n\nLos grupos tambi\u00e9n nos brindan la posibilidad de consultar o definir las\netiquetas de varios actores al mismo tiempo:\n\n\nnaves = pilas.actores.Nave() * 10\nnaves.etiquetas.agregar('enemigo')\n\nitems = pilas.actores.Banana() * 5\nitems.etiquetas.agregar('comestible')\n\notro_grupo = pilas.actores.Manzana() * 2\notro_grupo.etiquetas.agregar('comestible')\n\n\n\n\nA\u00f1adiendo colisiones mediante etiquetas\n\n\nAhora que podemos a\u00f1adir etiquetas a los actores, podemos describir las\ncolisiones de forma mas sencilla.\n\n\nPor ejemplo, si creamos un escenario con monedas y un mono que se pueda\nmover con el teclado as\u00ed:\n\n\nmono = pilas.actores.Mono()\nmonedas = pilas.actores.Moneda() * 20\n\nmono.aprender('arrastrable')\n\n\n\n\npodemos definir una acci\u00f3n de colisi\u00f3n simplemente indicando la funci\u00f3n\nde respuesta y las etiquetas que intervienen:\n\n\ndef capturar(mono, cosa):\n    cosa.eliminar()\n    mono.sonreir()\n\npilas.colisiones.agregar('mono', 'moneda', capturar)\n\n\n\n\nAhora, incluso aunque se elimine las monedas de la pantalla, si creamos\nnuevas van a seguir siendo \"comestibles\" por el mono:\n\n\nmas_monedas = pilas.actores.Moneda() * 10\n\n\n\n\nIncluso cualquier otra cosa que tenga estas etiquetas va a ser\ncapturado por el mono:\n\n\ncajas = pilas.actores.Caja() * 10\ncajas.etiquetas.agregar('moneda')\n\n\n\n\nClaro, lo ideal en este caso es definir las colisiones usando etiquetas\ngen\u00e9ricas como: 'comestible', 'enemigo', 'vida' etc...\n\n\nLas etiquetas tambi\u00e9n sirven con figuras\n\n\nTen en cuenta que las figuras f\u00edsicas tambi\u00e9n pueden contener etiquetas de la misma forma de los actores.\n\n\nEsto es super \u00fatil cuando queremos crear colisiones mas gen\u00e9ricas o invisibles.\n\n\nPor ejemplo, podr\u00edamos tener una circunferencia que al momento de tocar\ncualquier rect\u00e1ngulo desaparezca:\n\n\ncirculo = pilas.fisica.Circulo()\ncirculo.etiquetas.agregar(\ncolisionable\n)\n\ndef destruir(circulo_que_colisiona, un_rectangulo):\n    circulo_que_colisiona.eliminar()\n\npilas.colisiones.agregar(\ncolisionable\n, \nrectangulo\n, destruir)\n\n\n\n\nEso s\u00ed, tenemos que tener en cuenta que la funci\u00f3n \"destruir\" va a recibir las dos figuras en contacto y no dos actores como vimos en los otros\nejemplos de colisi\u00f3n entre actores.", 
            "title": "Etiquetas"
        }, 
        {
            "location": "/etiquetas/#etiquetas", 
            "text": "Las etiquetas nos permiten se\u00f1alar actores, ponerles una marca de\nclasificaci\u00f3n y distinguirlos de manera muy simple.  Cada etiqueta es solamente una palabra, por ejemplo \"enemigo\",\n\"protagonista\", \"munici\u00f3n\" etc... y podemos vincularla\ncon cualquier actor o grupo, para se\u00f1alar el rol de ese actor\no grupo.  Las etiquetas se utilizan principalmente para simplificar\nla creaci\u00f3n de colisiones, que vimos en el\ncap\u00edtulo anterior.", 
            "title": "Etiquetas"
        }, 
        {
            "location": "/etiquetas/#conociendo-las-etiquetas", 
            "text": "Cada actor que existe en pilas tiene un atributo  etiquetas ,\nque inicialmente tiene el nombre de la clase que origin\u00f3\nal actor, por ejemplo:   mono = pilas.actores.Mono()  mono.etiquetas\n['mono']  aceituna = pilas.actores.Aceituna()  aceituna.etiquetas\n['aceituna']  y estas etiquetas, a su vez, se pueden a\u00f1adir usando el m\u00e9todo  agregar :   mono.etiquetas.agregar('protagonista')\n['mono', 'protagonista']  o incluso consultar si un actor tiene o no una determinada etiqueta:   mono.tiene_etiqueta(\"enemigo\")\nFalse  mono.tiene_etiqueta(\"mono\")\nTrue", 
            "title": "Conociendo las Etiquetas"
        }, 
        {
            "location": "/etiquetas/#usando-grupos", 
            "text": "Los grupos tambi\u00e9n nos brindan la posibilidad de consultar o definir las\netiquetas de varios actores al mismo tiempo:  naves = pilas.actores.Nave() * 10\nnaves.etiquetas.agregar('enemigo')\n\nitems = pilas.actores.Banana() * 5\nitems.etiquetas.agregar('comestible')\n\notro_grupo = pilas.actores.Manzana() * 2\notro_grupo.etiquetas.agregar('comestible')", 
            "title": "Usando grupos"
        }, 
        {
            "location": "/etiquetas/#anadiendo-colisiones-mediante-etiquetas", 
            "text": "Ahora que podemos a\u00f1adir etiquetas a los actores, podemos describir las\ncolisiones de forma mas sencilla.  Por ejemplo, si creamos un escenario con monedas y un mono que se pueda\nmover con el teclado as\u00ed:  mono = pilas.actores.Mono()\nmonedas = pilas.actores.Moneda() * 20\n\nmono.aprender('arrastrable')  podemos definir una acci\u00f3n de colisi\u00f3n simplemente indicando la funci\u00f3n\nde respuesta y las etiquetas que intervienen:  def capturar(mono, cosa):\n    cosa.eliminar()\n    mono.sonreir()\n\npilas.colisiones.agregar('mono', 'moneda', capturar)  Ahora, incluso aunque se elimine las monedas de la pantalla, si creamos\nnuevas van a seguir siendo \"comestibles\" por el mono:  mas_monedas = pilas.actores.Moneda() * 10  Incluso cualquier otra cosa que tenga estas etiquetas va a ser\ncapturado por el mono:  cajas = pilas.actores.Caja() * 10\ncajas.etiquetas.agregar('moneda')  Claro, lo ideal en este caso es definir las colisiones usando etiquetas\ngen\u00e9ricas como: 'comestible', 'enemigo', 'vida' etc...", 
            "title": "A\u00f1adiendo colisiones mediante etiquetas"
        }, 
        {
            "location": "/etiquetas/#las-etiquetas-tambien-sirven-con-figuras", 
            "text": "Ten en cuenta que las figuras f\u00edsicas tambi\u00e9n pueden contener etiquetas de la misma forma de los actores.  Esto es super \u00fatil cuando queremos crear colisiones mas gen\u00e9ricas o invisibles.  Por ejemplo, podr\u00edamos tener una circunferencia que al momento de tocar\ncualquier rect\u00e1ngulo desaparezca:  circulo = pilas.fisica.Circulo()\ncirculo.etiquetas.agregar( colisionable )\n\ndef destruir(circulo_que_colisiona, un_rectangulo):\n    circulo_que_colisiona.eliminar()\n\npilas.colisiones.agregar( colisionable ,  rectangulo , destruir)  Eso s\u00ed, tenemos que tener en cuenta que la funci\u00f3n \"destruir\" va a recibir las dos figuras en contacto y no dos actores como vimos en los otros\nejemplos de colisi\u00f3n entre actores.", 
            "title": "Las etiquetas tambi\u00e9n sirven con figuras"
        }
    ]
}